/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */

'use strict';

var React = require('react');
var containerUtilities = require('@zendeskgarden/container-utilities');
var containerSelection = require('@zendeskgarden/container-selection');
var PropTypes = require('prop-types');

const useTabs = _ref => {
  let {
    tabs,
    orientation = 'horizontal',
    idPrefix,
    ...options
  } = _ref;
  const prefix = containerUtilities.useId(idPrefix);
  const PANEL_ID = `${prefix}__panel`;
  const TAB_ID = `${prefix}__tab`;
  const values = React.useMemo(() => tabs.reduce((all, tab) => {
    !tab.disabled && all.push(tab.value);
    return all;
  }, []), [tabs]);
  const {
    selectedValue,
    focusedValue,
    getGroupProps,
    getElementProps
  } = containerSelection.useSelection({
    values,
    direction: orientation,
    defaultSelectedValue: values[0],
    ...options
  });
  const getTabListProps = React.useCallback(function (_temp) {
    let {
      role = 'tablist',
      ...other
    } = _temp === void 0 ? {} : _temp;
    return {
      ...getGroupProps(other),
      role: role === null ? undefined : role,
      'aria-orientation': orientation,
      'data-garden-container-id': 'containers.tabs',
      'data-garden-container-version': '2.0.7'
    };
  }, [getGroupProps, orientation]);
  const getTabProps = React.useCallback(_ref2 => {
    let {
      role = 'tab',
      value,
      ...other
    } = _ref2;
    const isDisabled = values.indexOf(value) === -1;
    const {
      onClick,
      onKeyDown,
      onFocus,
      onBlur,
      ...elementProps
    } = getElementProps({
      value,
      role: role === null ? undefined : role,
      ...other
    });
    return {
      ...elementProps,
      onClick: isDisabled ? undefined : onClick,
      onFocus: isDisabled ? undefined : onFocus,
      onKeyDown: isDisabled ? undefined : onKeyDown,
      onBlur: isDisabled ? undefined : onBlur,
      id: `${TAB_ID}:${value}`,
      'aria-disabled': isDisabled || undefined,
      'aria-controls': `${PANEL_ID}:${value}`
    };
  }, [getElementProps, values, PANEL_ID, TAB_ID]);
  const getTabPanelProps = React.useCallback(_ref3 => {
    let {
      role = 'tabpanel',
      value,
      ...other
    } = _ref3;
    return {
      role: role === null ? undefined : role,
      id: `${PANEL_ID}:${value}`,
      hidden: value !== selectedValue,
      'aria-labelledby': `${TAB_ID}:${value}`,
      ...other
    };
  }, [selectedValue, PANEL_ID, TAB_ID]);
  return React.useMemo(() => ({
    selectedValue,
    focusedValue,
    getTabListProps,
    getTabProps,
    getTabPanelProps
  }), [selectedValue, focusedValue, getTabListProps, getTabProps, getTabPanelProps]);
};

const TabsContainer = _ref => {
  let {
    children,
    render = children,
    ...options
  } = _ref;
  return React.createElement(React.Fragment, null, render(useTabs(options)));
};
TabsContainer.defaultProps = {
  orientation: 'horizontal'
};
TabsContainer.propTypes = {
  children: PropTypes.func,
  render: PropTypes.func,
  tabs: PropTypes.arrayOf(PropTypes.any).isRequired,
  rtl: PropTypes.bool,
  orientation: PropTypes.oneOf(['horizontal', 'vertical']),
  idPrefix: PropTypes.string,
  defaultSelectedValue: PropTypes.any,
  selectedValue: PropTypes.any,
  onSelect: PropTypes.func
};

exports.TabsContainer = TabsContainer;
exports.useTabs = useTabs;
