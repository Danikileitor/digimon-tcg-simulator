/**
* Copyright Zendesk, Inc.
*
* Use of this source code is governed under the Apache License, Version 2.0
* found at http://www.apache.org/licenses/LICENSE-2.0.
*/
'use strict';

var React = require('react');
var PropTypes = require('prop-types');
var mergeRefs = require('react-merge-refs');
var styled = require('styled-components');
var reactTheming = require('@zendeskgarden/react-theming');
var polished = require('polished');
var containerTabs = require('@zendeskgarden/container-tabs');
var containerUtilities = require('@zendeskgarden/container-utilities');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);
var mergeRefs__default = /*#__PURE__*/_interopDefault(mergeRefs);
var styled__default = /*#__PURE__*/_interopDefault(styled);

const COMPONENT_ID$3 = 'tabs.tab';
const colorStyles = _ref => {
  let {
    theme,
    isSelected
  } = _ref;
  const selectedColor = reactTheming.getColorV8('primaryHue', 600, theme);
  return styled.css(["border-color:", ";color:", ";&:hover{color:", ";}", " &:active{border-color:currentcolor;color:", ";}&[aria-disabled='true']{border-color:transparent;color:", ";}"], isSelected && 'currentcolor !important', isSelected ? selectedColor : 'inherit', selectedColor, reactTheming.focusStyles({
    theme,
    inset: true,
    spacerWidth: null,
    shadowWidth: 'sm',
    selector: '&:focus-visible::before, &[data-garden-focus-visible="true"]::before',
    styles: {
      color: selectedColor
    }
  }), selectedColor, props => reactTheming.getColorV8('neutralHue', 400, props.theme));
};
const sizeStyles = _ref2 => {
  let {
    theme
  } = _ref2;
  const paddingTop = theme.space.base * 2.5;
  const paddingHorizontal = theme.space.base * 7;
  const paddingBottom = paddingTop - polished.stripUnit(theme.borderWidths.md) - polished.stripUnit(theme.borderWidths.sm);
  return styled.css(["padding:", "px ", "px ", "px;"], paddingTop, paddingHorizontal, paddingBottom);
};
const StyledTab = styled__default.default.div.attrs({
  'data-garden-id': COMPONENT_ID$3,
  'data-garden-version': '8.76.2'
}).withConfig({
  displayName: "StyledTab",
  componentId: "sc-x2pbow-0"
})(["display:inline-block;position:relative;transition:color 0.25s ease-in-out;border-bottom:", " transparent;border-width:", ";cursor:pointer;overflow:hidden;vertical-align:top;user-select:none;text-align:center;text-decoration:none;text-overflow:ellipsis;", " ", " &:focus{text-decoration:none;}&::before{transition:box-shadow 0.1s ease-in-out;content:'';}&:focus-visible::before,&[data-garden-focus-visible]::before{position:absolute;top:", "px;right:", "px;left:", "px;border-radius:", ";height:", "px;pointer-events:none;}&:active::before{box-shadow:none;}&[aria-disabled='true']{cursor:default;}", ";"], props => props.theme.borderStyles.solid, props => props.theme.borderWidths.md, sizeStyles, colorStyles, props => props.theme.space.base * 2.5, props => props.theme.space.base * 6, props => props.theme.space.base * 6, props => props.theme.borderRadii.md, props => props.theme.space.base * 5, props => reactTheming.retrieveComponentStyles(COMPONENT_ID$3, props));
StyledTab.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

const COMPONENT_ID$2 = 'tabs.tablist';
const StyledTabList = styled__default.default.div.attrs({
  'data-garden-id': COMPONENT_ID$2,
  'data-garden-version': '8.76.2'
}).withConfig({
  displayName: "StyledTabList",
  componentId: "sc-wa5aaj-0"
})(["display:block;margin-top:0;margin-bottom:", "px;border-bottom:", " ", " ", ";padding:0;line-height:", "px;white-space:nowrap;color:", ";font-size:", ";", ";"], props => props.theme.space.base * 5, props => props.theme.borderWidths.sm, props => props.theme.borderStyles.solid, props => reactTheming.getColorV8('neutralHue', 300, props.theme), props => props.theme.space.base * 5, props => reactTheming.getColorV8('neutralHue', 600, props.theme), props => props.theme.fontSizes.md, props => reactTheming.retrieveComponentStyles(COMPONENT_ID$2, props));
StyledTabList.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

const COMPONENT_ID$1 = 'tabs.tabpanel';
const StyledTabPanel = styled__default.default.div.attrs({
  'data-garden-id': COMPONENT_ID$1,
  'data-garden-version': '8.76.2'
}).withConfig({
  displayName: "StyledTabPanel",
  componentId: "sc-7lhrmp-0"
})(["display:block;&[aria-hidden='true']{display:none;}", ";"], props => reactTheming.retrieveComponentStyles(COMPONENT_ID$1, props));
StyledTabPanel.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

const COMPONENT_ID = 'tabs.tabs';
const verticalStyling = _ref => {
  let {
    theme
  } = _ref;
  return styled.css(["display:table;", "{display:table-cell;margin-bottom:0;border-bottom:none;vertical-align:top;}", "{display:block;margin-bottom:", "px;margin-left:", ";border-left:", ";border-bottom-style:none;border-", "-style:", ";border-", "-color:transparent;padding:", "px ", "px;text-align:", ";&:last-of-type{margin-bottom:0;}&:focus-visible::before,&[data-garden-focus-visible]::before{top:", "px;right:", "px;left:", "px;}}", "{margin-", ":", "px;vertical-align:top;}"], StyledTabList, StyledTab, theme.space.base * 5, theme.rtl && '0', theme.rtl && '0', theme.rtl ? 'right' : 'left', theme.borderStyles.solid, theme.rtl ? 'right' : 'left', theme.space.base, theme.space.base * 2, theme.rtl ? 'right' : 'left', theme.space.base, theme.space.base, theme.space.base, StyledTabPanel, theme.rtl ? 'right' : 'left', theme.space.base * 8);
};
const StyledTabs = styled__default.default.div.attrs({
  'data-garden-id': COMPONENT_ID,
  'data-garden-version': '8.76.2'
}).withConfig({
  displayName: "StyledTabs",
  componentId: "sc-1qaor65-0"
})(["display:block;overflow:hidden;direction:", ";", ";", ";"], props => props.theme.rtl && 'rtl', props => props.isVertical && verticalStyling(props), props => reactTheming.retrieveComponentStyles(COMPONENT_ID, props));
StyledTabs.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

const TabsContext = React.createContext(undefined);
const useTabsContext = () => {
  return React.useContext(TabsContext);
};

const Tab = React__default.default.forwardRef((_ref, ref) => {
  let {
    disabled,
    item,
    ...otherProps
  } = _ref;
  const tabsPropGetters = useTabsContext();
  if (disabled || !tabsPropGetters) {
    return React__default.default.createElement(StyledTab, Object.assign({
      role: "tab",
      "aria-disabled": disabled,
      ref: ref
    }, otherProps));
  }
  const {
    ref: tabRef,
    ...tabProps
  } = tabsPropGetters.getTabProps({
    value: item
  });
  return React__default.default.createElement(StyledTab, Object.assign({
    isSelected: item === tabsPropGetters.selectedValue
  }, tabProps, otherProps, {
    ref: mergeRefs__default.default([tabRef, ref])
  }));
});
Tab.displayName = 'Tab';
Tab.propTypes = {
  disabled: PropTypes__default.default.bool,
  item: PropTypes__default.default.any
};

const TabList = React__default.default.forwardRef((props, ref) => {
  const tabsPropGetters = useTabsContext();
  if (!tabsPropGetters) {
    return React__default.default.createElement(StyledTabList, Object.assign({
      ref: ref
    }, props));
  }
  const tabListProps = tabsPropGetters.getTabListProps();
  return React__default.default.createElement(StyledTabList, Object.assign({}, tabListProps, props, {
    ref: ref
  }));
});
TabList.displayName = 'TabList';

const TabPanel = React__default.default.forwardRef((_ref, ref) => {
  let {
    item,
    ...otherProps
  } = _ref;
  const tabsPropGetters = useTabsContext();
  if (!tabsPropGetters) {
    return React__default.default.createElement(StyledTabPanel, Object.assign({
      ref: ref
    }, otherProps));
  }
  const tabPanelProps = tabsPropGetters.getTabPanelProps({
    value: item
  });
  return React__default.default.createElement(StyledTabPanel, Object.assign({
    "aria-hidden": tabsPropGetters.selectedValue !== item
  }, tabPanelProps, otherProps, {
    ref: ref
  }));
});
TabPanel.displayName = 'TabPanel';
TabPanel.propTypes = {
  item: PropTypes__default.default.any
};

const toTabs = children => React.Children.toArray(children).reduce((_items, child) => {
  const retVal = _items;
  if ( React.isValidElement(child)) {
    if ('item' in child.props) {
      const props = child.props;
      retVal.push({
        value: props.item,
        disabled: props.disabled
      });
    } else {
      const childItems = toTabs(child.props.children);
      retVal.push(...childItems);
    }
  }
  return retVal;
}, []);

const Tabs = React.forwardRef((_ref, ref) => {
  let {
    isVertical,
    children,
    onChange,
    selectedItem: controlledSelectedItem,
    ...otherProps
  } = _ref;
  const theme = React.useContext(styled.ThemeContext) || reactTheming.DEFAULT_THEME;
  const [internalSelectedItem, setInternalSelectedItem] = React.useState();
  const selectedItem = containerUtilities.getControlledValue(controlledSelectedItem, internalSelectedItem);
  const tabs = React.useMemo(() => toTabs(children), [children]);
  const tabsContextValue = containerTabs.useTabs({
    tabs,
    rtl: theme.rtl,
    orientation: isVertical ? 'vertical' : 'horizontal',
    selectedValue: selectedItem,
    defaultSelectedValue: tabs.find(tab => !tab.disabled)?.value,
    onSelect: item => {
      if (onChange) {
        onChange(item);
      } else {
        setInternalSelectedItem(item);
      }
    }
  });
  return React__default.default.createElement(TabsContext.Provider, {
    value: tabsContextValue
  }, React__default.default.createElement(StyledTabs, Object.assign({
    isVertical: isVertical
  }, otherProps, {
    ref: ref
  }), children));
});
Tabs.propTypes = {
  isVertical: PropTypes__default.default.bool,
  selectedItem: PropTypes__default.default.any,
  onChange: PropTypes__default.default.func
};
Tabs.defaultProps = {
  isVertical: false
};
Tabs.displayName = 'Tabs';

exports.Tab = Tab;
exports.TabList = TabList;
exports.TabPanel = TabPanel;
exports.Tabs = Tabs;
