/**
* Copyright Zendesk, Inc.
*
* Use of this source code is governed under the Apache License, Version 2.0
* found at http://www.apache.org/licenses/LICENSE-2.0.
*/
import React, { forwardRef, useContext, useState, useMemo } from 'react';
import PropTypes from 'prop-types';
import { ThemeContext } from 'styled-components';
import { DEFAULT_THEME } from '@zendeskgarden/react-theming';
import { useTabs } from '@zendeskgarden/container-tabs';
import { getControlledValue } from '@zendeskgarden/container-utilities';
import { toTabs } from '../utils/toTabs.js';
import { TabsContext } from '../utils/useTabsContext.js';
import { StyledTabs } from '../styled/StyledTabs.js';

const Tabs = forwardRef((_ref, ref) => {
  let {
    isVertical,
    children,
    onChange,
    selectedItem: controlledSelectedItem,
    ...otherProps
  } = _ref;
  const theme = useContext(ThemeContext) || DEFAULT_THEME;
  const [internalSelectedItem, setInternalSelectedItem] = useState();
  const selectedItem = getControlledValue(controlledSelectedItem, internalSelectedItem);
  const tabs = useMemo(() => toTabs(children), [children]);
  const tabsContextValue = useTabs({
    tabs,
    rtl: theme.rtl,
    orientation: isVertical ? 'vertical' : 'horizontal',
    selectedValue: selectedItem,
    defaultSelectedValue: tabs.find(tab => !tab.disabled)?.value,
    onSelect: item => {
      if (onChange) {
        onChange(item);
      } else {
        setInternalSelectedItem(item);
      }
    }
  });
  return React.createElement(TabsContext.Provider, {
    value: tabsContextValue
  }, React.createElement(StyledTabs, Object.assign({
    isVertical: isVertical
  }, otherProps, {
    ref: ref
  }), children));
});
Tabs.propTypes = {
  isVertical: PropTypes.bool,
  selectedItem: PropTypes.any,
  onChange: PropTypes.func
};
Tabs.defaultProps = {
  isVertical: false
};
Tabs.displayName = 'Tabs';

export { Tabs };
